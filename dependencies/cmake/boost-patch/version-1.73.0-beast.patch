diff --git a/beast.0/_experimental/http/impl/icy_stream.hpp b/beast.1/_experimental/http/impl/icy_stream.hpp
index 9b6e66ab92..c2760c5589 100644
--- a/beast.0/_experimental/http/impl/icy_stream.hpp
+++ b/beast.1/_experimental/http/impl/icy_stream.hpp
@@ -259,7 +259,7 @@ read_some(MutableBufferSequence const& buffers, error_code& ec)
 template<class NextLayer>
 template<
     class MutableBufferSequence,
-    class ReadHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 icy_stream<NextLayer>::
 async_read_some(
@@ -311,7 +311,7 @@ write_some(MutableBufferSequence const& buffers, error_code& ec)
 template<class NextLayer>
 template<
     class MutableBufferSequence,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 icy_stream<NextLayer>::
 async_write_some(
diff --git a/beast.0/_experimental/test/impl/stream.hpp b/beast.1/_experimental/test/impl/stream.hpp
index 3925d7421f..5ca612d3c7 100644
--- a/beast.0/_experimental/test/impl/stream.hpp
+++ b/beast.1/_experimental/test/impl/stream.hpp
@@ -306,7 +306,7 @@ read_some(MutableBufferSequence const& buffers,
     return 0;
 }
 
-template<class MutableBufferSequence, class ReadHandler>
+template<class MutableBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 stream::
 async_read_some(
@@ -386,7 +386,7 @@ write_some(
     return n;
 }
 
-template<class ConstBufferSequence, class WriteHandler>
+template<class ConstBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 stream::
 async_write_some(
diff --git a/beast.0/core/detail/impl/read.hpp b/beast.1/core/detail/impl/read.hpp
index 3724979272..842af609df 100644
--- a/beast.0/core/detail/impl/read.hpp
+++ b/beast.1/core/detail/impl/read.hpp
@@ -214,7 +214,7 @@ template<
     class AsyncReadStream,
     class DynamicBuffer,
     class CompletionCondition,
-    class ReadHandler,
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler,
     class>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 async_read(
diff --git a/beast.0/core/detail/is_invocable.hpp b/beast.1/core/detail/is_invocable.hpp
index 65f1b6c842..56d95a236a 100644
--- a/beast.0/core/detail/is_invocable.hpp
+++ b/beast.1/core/detail/is_invocable.hpp
@@ -10,6 +10,8 @@
 #ifndef BOOST_BEAST_DETAIL_IS_INVOCABLE_HPP
 #define BOOST_BEAST_DETAIL_IS_INVOCABLE_HPP
 
+#include <boost/asio/async_result.hpp>
+#include <boost/type_traits/make_void.hpp>
 #include <type_traits>
 #include <utility>
 
@@ -51,6 +53,26 @@ struct is_invocable<C, R(A...)>
 };
 /** @} */
 
+template<class CompletionToken, class Signature, class = void>
+struct is_completion_token_for : std::false_type
+{
+};
+
+struct any_initiation
+{
+    template<class...AnyArgs>
+    void operator()(AnyArgs&&...);
+};
+
+template<class CompletionToken, class R, class...Args>
+struct is_completion_token_for<
+    CompletionToken, R(Args...), boost::void_t<decltype(
+        boost::asio::async_initiate<CompletionToken, R(Args...)>(
+            any_initiation(), std::declval<CompletionToken&>())
+        )>> : std::true_type
+{
+};
+
 } // detail
 } // beast
 } // boost
diff --git a/beast.0/core/detail/read.hpp b/beast.1/core/detail/read.hpp
index 3f7c17f27f..91a02b8321 100644
--- a/beast.0/core/detail/read.hpp
+++ b/beast.1/core/detail/read.hpp
@@ -219,7 +219,7 @@ template<
     class AsyncReadStream,
     class DynamicBuffer,
     class CompletionCondition,
-    class ReadHandler
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler
 #if ! BOOST_BEAST_DOXYGEN
     , class = typename std::enable_if<
         is_async_read_stream<AsyncReadStream>::value &&
diff --git a/beast.0/core/detect_ssl.hpp b/beast.1/core/detect_ssl.hpp
index e0b4cd4555..644318de34 100644
--- a/beast.0/core/detect_ssl.hpp
+++ b/beast.1/core/detect_ssl.hpp
@@ -374,13 +374,13 @@ struct run_detect_ssl_op
     void operator()(
         DetectHandler&& h,
         AsyncReadStream* s, // references are passed as pointers
-        DynamicBuffer& b)
+        DynamicBuffer* b)
     {
         detect_ssl_op<
             typename std::decay<DetectHandler>::type,
             AsyncReadStream,
             DynamicBuffer>(
-                std::forward<DetectHandler>(h), *s, b);
+                std::forward<DetectHandler>(h), *s, *b);
     }
 };
 
@@ -439,7 +439,7 @@ async_detect_ssl(
             detail::run_detect_ssl_op{},
             token,
             &stream, // pass the reference by pointer
-            buffer);
+            &buffer);
 }
 
 //]
diff --git a/beast.0/core/impl/basic_stream.hpp b/beast.1/core/impl/basic_stream.hpp
index 0e70f7cefb..36bd6b84f2 100644
--- a/beast.0/core/impl/basic_stream.hpp
+++ b/beast.1/core/impl/basic_stream.hpp
@@ -776,7 +776,7 @@ close()
 //------------------------------------------------------------------------------
 
 template<class Protocol, class Executor, class RatePolicy>
-template<class ConnectHandler>
+template<BOOST_BEAST_ASYNC_TPARAM1 ConnectHandler>
 BOOST_BEAST_ASYNC_RESULT1(ConnectHandler)
 basic_stream<Protocol, Executor, RatePolicy>::
 async_connect(
@@ -795,7 +795,7 @@ async_connect(
 template<class Protocol, class Executor, class RatePolicy>
 template<
     class EndpointSequence,
-    class RangeConnectHandler,
+    BOOST_ASIO_COMPLETION_TOKEN_FOR(void(error_code, typename Protocol::endpoint)) RangeConnectHandler,
     class>
 BOOST_ASIO_INITFN_RESULT_TYPE(RangeConnectHandler,void(error_code, typename Protocol::endpoint))
 basic_stream<Protocol, Executor, RatePolicy>::
@@ -817,7 +817,7 @@ template<class Protocol, class Executor, class RatePolicy>
 template<
     class EndpointSequence,
     class ConnectCondition,
-    class RangeConnectHandler,
+    BOOST_ASIO_COMPLETION_TOKEN_FOR(void(error_code, typename Protocol::endpoint)) RangeConnectHandler,
     class>
 BOOST_ASIO_INITFN_RESULT_TYPE(RangeConnectHandler,void (error_code, typename Protocol::endpoint))
 basic_stream<Protocol, Executor, RatePolicy>::
@@ -839,7 +839,7 @@ async_connect(
 template<class Protocol, class Executor, class RatePolicy>
 template<
     class Iterator,
-    class IteratorConnectHandler>
+    BOOST_ASIO_COMPLETION_TOKEN_FOR(void(error_code, Iterator)) IteratorConnectHandler>
 BOOST_ASIO_INITFN_RESULT_TYPE(IteratorConnectHandler,void (error_code, Iterator))
 basic_stream<Protocol, Executor, RatePolicy>::
 async_connect(
@@ -860,7 +860,7 @@ template<class Protocol, class Executor, class RatePolicy>
 template<
     class Iterator,
     class ConnectCondition,
-    class IteratorConnectHandler>
+    BOOST_ASIO_COMPLETION_TOKEN_FOR(void(error_code, Iterator)) IteratorConnectHandler>
 BOOST_ASIO_INITFN_RESULT_TYPE(IteratorConnectHandler,void (error_code, Iterator))
 basic_stream<Protocol, Executor, RatePolicy>::
 async_connect(
@@ -881,7 +881,7 @@ async_connect(
 //------------------------------------------------------------------------------
 
 template<class Protocol, class Executor, class RatePolicy>
-template<class MutableBufferSequence, class ReadHandler>
+template<class MutableBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 basic_stream<Protocol, Executor, RatePolicy>::
 async_read_some(
@@ -901,7 +901,7 @@ async_read_some(
 }
 
 template<class Protocol, class Executor, class RatePolicy>
-template<class ConstBufferSequence, class WriteHandler>
+template<class ConstBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 basic_stream<Protocol, Executor, RatePolicy>::
 async_write_some(
diff --git a/beast.0/core/impl/buffered_read_stream.hpp b/beast.1/core/impl/buffered_read_stream.hpp
index cea0dcb9fa..097deaceaf 100644
--- a/beast.0/core/impl/buffered_read_stream.hpp
+++ b/beast.1/core/impl/buffered_read_stream.hpp
@@ -110,7 +110,7 @@ struct run_read_op
     operator()(
         ReadHandler&& h,
         buffered_read_stream* s,
-        Buffers const& b)
+        Buffers const* b)
     {
         // If you get an error on the following line it means
         // that your handler does not meet the documented type
@@ -124,7 +124,7 @@ struct run_read_op
         read_op<
             Buffers,
             typename std::decay<ReadHandler>::type>(
-                std::forward<ReadHandler>(h), *s, b);
+                std::forward<ReadHandler>(h), *s, *b);
     }
 };
 
@@ -141,7 +141,7 @@ buffered_read_stream(Args&&... args)
 }
 
 template<class Stream, class DynamicBuffer>
-template<class ConstBufferSequence, class WriteHandler>
+template<class ConstBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 buffered_read_stream<Stream, DynamicBuffer>::
 async_write_some(
@@ -153,7 +153,7 @@ async_write_some(
     static_assert(net::is_const_buffer_sequence<
         ConstBufferSequence>::value,
             "ConstBufferSequence type requirements not met");
-    static_assert(detail::is_invocable<WriteHandler,
+    static_assert(detail::is_completion_token_for<WriteHandler,
         void(error_code, std::size_t)>::value,
             "WriteHandler type requirements not met");
     return next_layer_.async_write_some(buffers,
@@ -212,7 +212,7 @@ read_some(MutableBufferSequence const& buffers,
 }
 
 template<class Stream, class DynamicBuffer>
-template<class MutableBufferSequence, class ReadHandler>
+template<class MutableBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 buffered_read_stream<Stream, DynamicBuffer>::
 async_read_some(
@@ -233,7 +233,7 @@ async_read_some(
             typename ops::run_read_op{},
             handler,
             this,
-            buffers);
+            &buffers);
 }
 
 } // beast
diff --git a/beast.0/core/impl/flat_stream.hpp b/beast.1/core/impl/flat_stream.hpp
index f99ec02678..4551a59eda 100644
--- a/beast.0/core/impl/flat_stream.hpp
+++ b/beast.1/core/impl/flat_stream.hpp
@@ -144,7 +144,7 @@ read_some(MutableBufferSequence const& buffers, error_code& ec)
 template<class NextLayer>
 template<
     class MutableBufferSequence,
-    class ReadHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 flat_stream<NextLayer>::
 async_read_some(
@@ -225,7 +225,7 @@ write_some(ConstBufferSequence const& buffers, error_code& ec)
 template<class NextLayer>
 template<
     class ConstBufferSequence,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 flat_stream<NextLayer>::
 async_write_some(
diff --git a/beast.0/http/field.hpp b/beast.1/http/field.hpp
index 69eb253fdf..3f94364771 100644
--- a/beast.0/http/field.hpp
+++ b/beast.1/http/field.hpp
@@ -396,12 +396,9 @@ field
 string_to_field(string_view s);
 
 /// Write the text for a field name to an output stream.
-inline
+BOOST_BEAST_DECL
 std::ostream&
-operator<<(std::ostream& os, field f)
-{
-    return os << to_string(f);
-}
+operator<<(std::ostream& os, field f);
 
 } // http
 } // beast
diff --git a/beast.0/http/impl/field.ipp b/beast.1/http/impl/field.ipp
index 94ff1fa955..f25be99b42 100644
--- a/beast.0/http/impl/field.ipp
+++ b/beast.1/http/impl/field.ipp
@@ -11,10 +11,12 @@
 #define BOOST_BEAST_HTTP_IMPL_FIELD_IPP
 
 #include <boost/beast/http/field.hpp>
+#include <boost/assert.hpp>
 #include <algorithm>
 #include <array>
 #include <cstring>
-#include <boost/assert.hpp>
+#include <ostream>
+
 
 namespace boost {
 namespace beast {
@@ -565,6 +567,12 @@ string_to_field(string_view s)
     return detail::get_field_table().string_to_field(s);
 }
 
+std::ostream&
+operator<<(std::ostream& os, field f)
+{
+    return os << to_string(f);
+}
+
 } // http
 } // beast
 } // boost
diff --git a/beast.0/http/impl/file_body_win32.hpp b/beast.1/http/impl/file_body_win32.hpp
index 32929d4104..cba7a0edf6 100644
--- a/beast.0/http/impl/file_body_win32.hpp
+++ b/beast.1/http/impl/file_body_win32.hpp
@@ -597,7 +597,7 @@ write_some(
 template<
     class Protocol, class Executor,
     bool isRequest, class Fields,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 async_write_some(
     net::basic_stream_socket<
diff --git a/beast.0/http/impl/read.hpp b/beast.1/http/impl/read.hpp
index ba265a57ed..3c11a9ca39 100644
--- a/beast.0/http/impl/read.hpp
+++ b/beast.1/http/impl/read.hpp
@@ -304,7 +304,7 @@ template<
     class AsyncReadStream,
     class DynamicBuffer,
     bool isRequest,
-    class ReadHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 async_read_some(
     AsyncReadStream& stream,
@@ -373,7 +373,7 @@ template<
     class AsyncReadStream,
     class DynamicBuffer,
     bool isRequest,
-    class ReadHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 async_read_header(
     AsyncReadStream& stream,
@@ -443,7 +443,7 @@ template<
     class AsyncReadStream,
     class DynamicBuffer,
     bool isRequest,
-    class ReadHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 async_read(
     AsyncReadStream& stream,
@@ -531,7 +531,7 @@ template<
     class AsyncReadStream,
     class DynamicBuffer,
     bool isRequest, class Body, class Allocator,
-    class ReadHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 async_read(
     AsyncReadStream& stream,
diff --git a/beast.0/http/impl/write.hpp b/beast.1/http/impl/write.hpp
index ebf74b2d0b..671108da71 100644
--- a/beast.0/http/impl/write.hpp
+++ b/beast.1/http/impl/write.hpp
@@ -463,7 +463,7 @@ write_some_impl(
 template<
     class AsyncWriteStream,
     bool isRequest, class Body, class Fields,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 async_write_some_impl(
     AsyncWriteStream& stream,
@@ -526,7 +526,7 @@ write_some(
 template<
     class AsyncWriteStream,
     bool isRequest, class Body, class Fields,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 async_write_some(
     AsyncWriteStream& stream,
@@ -608,7 +608,7 @@ write_header(
 template<
     class AsyncWriteStream,
     bool isRequest, class Body, class Fields,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 async_write_header(
     AsyncWriteStream& stream,
@@ -681,7 +681,7 @@ write(
 template<
     class AsyncWriteStream,
     bool isRequest, class Body, class Fields,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 async_write(
     AsyncWriteStream& stream,
@@ -801,7 +801,7 @@ write(
 template<
     class AsyncWriteStream,
     bool isRequest, class Body, class Fields,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 async_write(
     AsyncWriteStream& stream,
@@ -830,7 +830,7 @@ async_write(
 template<
     class AsyncWriteStream,
     bool isRequest, class Body, class Fields,
-    class WriteHandler>
+    BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 async_write(
     AsyncWriteStream& stream,
diff --git a/beast.0/http/span_body.hpp b/beast.1/http/span_body.hpp
index a0d32f8470..72b9ef5d1a 100644
--- a/beast.0/http/span_body.hpp
+++ b/beast.1/http/span_body.hpp
@@ -36,8 +36,10 @@ template<class T>
 struct span_body
 {
 private:
-    static_assert(std::is_pod<T>::value,
-        "POD requirements not met");
+    static_assert(
+        std::is_trivial<T>::value &&
+        std::is_standard_layout<T>::value,
+            "POD requirements not met");
 
 public:
     /** The type of container used for the body
diff --git a/beast.0/ssl/ssl_stream.hpp b/beast.1/ssl/ssl_stream.hpp
index cab2463de2..2ab888168b 100644
--- a/beast.0/ssl/ssl_stream.hpp
+++ b/beast.1/ssl/ssl_stream.hpp
@@ -555,7 +555,7 @@ public:
         need to ensure that all data is written before the asynchronous operation
         completes.
     */
-    template<class ConstBufferSequence, class WriteHandler>
+    template<class ConstBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
     BOOST_ASIO_INITFN_RESULT_TYPE(WriteHandler, void(boost::system::error_code, std::size_t))
     async_write_some(ConstBufferSequence const& buffers,
         BOOST_ASIO_MOVE_ARG(WriteHandler) handler)
@@ -636,7 +636,7 @@ public:
         if you need to ensure that the requested amount of data is read before
         the asynchronous operation completes.
     */
-    template<class MutableBufferSequence, class ReadHandler>
+    template<class MutableBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
     BOOST_ASIO_INITFN_RESULT_TYPE(ReadHandler, void(boost::system::error_code, std::size_t))
     async_read_some(MutableBufferSequence const& buffers,
         BOOST_ASIO_MOVE_ARG(ReadHandler) handler)
diff --git a/beast.0/version.hpp b/beast.1/version.hpp
index 4200bff4ac..2d45ceb1fb 100644
--- a/beast.0/version.hpp
+++ b/beast.1/version.hpp
@@ -20,7 +20,7 @@
     This is a simple integer that is incremented by one every
     time a set of code changes is merged to the develop branch.
 */
-#define BOOST_BEAST_VERSION 290
+#define BOOST_BEAST_VERSION 292
 
 #define BOOST_BEAST_VERSION_STRING "Boost.Beast/" BOOST_STRINGIZE(BOOST_BEAST_VERSION)
 
diff --git a/beast.0/websocket/impl/accept.hpp b/beast.1/websocket/impl/accept.hpp
index 538819b280..ef33c09b7f 100644
--- a/beast.0/websocket/impl/accept.hpp
+++ b/beast.1/websocket/impl/accept.hpp
@@ -542,7 +542,7 @@ accept(
 
 template<class NextLayer, bool deflateSupported>
 template<
-    class AcceptHandler>
+    BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
 BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
 stream<NextLayer, deflateSupported>::
 async_accept(
@@ -564,7 +564,7 @@ async_accept(
 template<class NextLayer, bool deflateSupported>
 template<
     class ResponseDecorator,
-    class AcceptHandler>
+    BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
 BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
 stream<NextLayer, deflateSupported>::
 async_accept_ex(
@@ -590,7 +590,7 @@ async_accept_ex(
 template<class NextLayer, bool deflateSupported>
 template<
     class ConstBufferSequence,
-    class AcceptHandler>
+    BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
 BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
 stream<NextLayer, deflateSupported>::
 async_accept(
@@ -621,7 +621,7 @@ template<class NextLayer, bool deflateSupported>
 template<
     class ConstBufferSequence,
     class ResponseDecorator,
-    class AcceptHandler>
+    BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
 BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
 stream<NextLayer, deflateSupported>::
 async_accept_ex(
@@ -654,7 +654,7 @@ async_accept_ex(
 template<class NextLayer, bool deflateSupported>
 template<
     class Body, class Allocator,
-    class AcceptHandler>
+    BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
 BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
 stream<NextLayer, deflateSupported>::
 async_accept(
@@ -678,7 +678,7 @@ template<class NextLayer, bool deflateSupported>
 template<
     class Body, class Allocator,
     class ResponseDecorator,
-    class AcceptHandler>
+    BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
 BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
 stream<NextLayer, deflateSupported>::
 async_accept_ex(
diff --git a/beast.0/websocket/impl/close.hpp b/beast.1/websocket/impl/close.hpp
index d59374ccd3..2b7d72932e 100644
--- a/beast.0/websocket/impl/close.hpp
+++ b/beast.1/websocket/impl/close.hpp
@@ -382,7 +382,7 @@ close(close_reason const& cr, error_code& ec)
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class CloseHandler>
+template<BOOST_BEAST_ASYNC_TPARAM1 CloseHandler>
 BOOST_BEAST_ASYNC_RESULT1(CloseHandler)
 stream<NextLayer, deflateSupported>::
 async_close(close_reason const& cr, CloseHandler&& handler)
diff --git a/beast.0/websocket/impl/handshake.hpp b/beast.1/websocket/impl/handshake.hpp
index 645b1a3a30..8fabe1ecba 100644
--- a/beast.0/websocket/impl/handshake.hpp
+++ b/beast.1/websocket/impl/handshake.hpp
@@ -268,7 +268,7 @@ do_handshake(
 //------------------------------------------------------------------------------
 
 template<class NextLayer, bool deflateSupported>
-template<class HandshakeHandler>
+template<BOOST_BEAST_ASYNC_TPARAM1 HandshakeHandler>
 BOOST_BEAST_ASYNC_RESULT1(HandshakeHandler)
 stream<NextLayer, deflateSupported>::
 async_handshake(
@@ -293,7 +293,7 @@ async_handshake(
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class HandshakeHandler>
+template<BOOST_BEAST_ASYNC_TPARAM1 HandshakeHandler>
 BOOST_BEAST_ASYNC_RESULT1(HandshakeHandler)
 stream<NextLayer, deflateSupported>::
 async_handshake(
diff --git a/beast.0/websocket/impl/ping.hpp b/beast.1/websocket/impl/ping.hpp
index 6f92d7c725..eef9983b37 100644
--- a/beast.0/websocket/impl/ping.hpp
+++ b/beast.1/websocket/impl/ping.hpp
@@ -288,7 +288,7 @@ pong(ping_data const& payload, error_code& ec)
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class WriteHandler>
+template<BOOST_BEAST_ASYNC_TPARAM1 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT1(WriteHandler)
 stream<NextLayer, deflateSupported>::
 async_ping(ping_data const& payload, WriteHandler&& handler)
@@ -306,7 +306,7 @@ async_ping(ping_data const& payload, WriteHandler&& handler)
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class WriteHandler>
+template<BOOST_BEAST_ASYNC_TPARAM1 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT1(WriteHandler)
 stream<NextLayer, deflateSupported>::
 async_pong(ping_data const& payload, WriteHandler&& handler)
diff --git a/beast.0/websocket/impl/read.hpp b/beast.1/websocket/impl/read.hpp
index 4e03baae38..5087cf54d4 100644
--- a/beast.0/websocket/impl/read.hpp
+++ b/beast.1/websocket/impl/read.hpp
@@ -804,7 +804,7 @@ read(DynamicBuffer& buffer, error_code& ec)
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class DynamicBuffer, class ReadHandler>
+template<class DynamicBuffer, BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 stream<NextLayer, deflateSupported>::
 async_read(DynamicBuffer& buffer, ReadHandler&& handler)
@@ -878,7 +878,7 @@ read_some(
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class DynamicBuffer, class ReadHandler>
+template<class DynamicBuffer, BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 stream<NextLayer, deflateSupported>::
 async_read_some(
@@ -1263,7 +1263,7 @@ loop:
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class MutableBufferSequence, class ReadHandler>
+template<class MutableBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 ReadHandler>
 BOOST_BEAST_ASYNC_RESULT2(ReadHandler)
 stream<NextLayer, deflateSupported>::
 async_read_some(
diff --git a/beast.0/websocket/impl/write.hpp b/beast.1/websocket/impl/write.hpp
index 2a82b677b3..b76441d39f 100644
--- a/beast.0/websocket/impl/write.hpp
+++ b/beast.1/websocket/impl/write.hpp
@@ -700,7 +700,7 @@ write_some(bool fin,
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class ConstBufferSequence, class WriteHandler>
+template<class ConstBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 stream<NextLayer, deflateSupported>::
 async_write_some(bool fin,
@@ -756,7 +756,7 @@ write(ConstBufferSequence const& buffers, error_code& ec)
 }
 
 template<class NextLayer, bool deflateSupported>
-template<class ConstBufferSequence, class WriteHandler>
+template<class ConstBufferSequence, BOOST_BEAST_ASYNC_TPARAM2 WriteHandler>
 BOOST_BEAST_ASYNC_RESULT2(WriteHandler)
 stream<NextLayer, deflateSupported>::
 async_write(
diff --git a/beast.0/websocket/stream.hpp b/beast.1/websocket/stream.hpp
index 5b17061ae0..b3bc22f78d 100644
--- a/beast.0/websocket/stream.hpp
+++ b/beast.1/websocket/stream.hpp
@@ -2634,7 +2634,7 @@ public:
 
     template<
         class ResponseDecorator,
-        class AcceptHandler>
+        BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
     BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
     async_accept_ex(
         ResponseDecorator const& decorator,
@@ -2643,7 +2643,7 @@ public:
     template<
         class ConstBufferSequence,
         class ResponseDecorator,
-        class AcceptHandler>
+            BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
     BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
     async_accept_ex(
         ConstBufferSequence const& buffers,
@@ -2656,7 +2656,7 @@ public:
     template<
         class Body, class Allocator,
         class ResponseDecorator,
-        class AcceptHandler>
+            BOOST_BEAST_ASYNC_TPARAM1 AcceptHandler>
     BOOST_BEAST_ASYNC_RESULT1(AcceptHandler)
     async_accept_ex(
         http::request<Body,
